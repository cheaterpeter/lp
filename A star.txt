#include <bits/stdtr1c++.h>
using namespace std;
int g=0;
void display(int arr[]){
    for(int i=0;i<9;i++){
        if(i%3==0){
            cout<<endl;
        }
        if(arr[i]==-1){
            cout<<"_";
        }
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}
void moveleft(int start[],int pos){
    swap(start[pos],start[pos-1]);
}
void moveright(int start[],int pos){
    swap(start[pos],start[pos+1]);
}
void movedown(int start[],int pos){
    swap(start[pos],start[pos+3]);
}
void moverup(int start[],int pos)
{
    swap(start[pos],start[pos-3]);
}
int heurstic(int start[],int goal[]){
    int h=0;
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            if(start[i]==goal[j]&&start[i]!=-1){

            
            h+=(abs((j-i)/3)+abs((j-i)%3));
            }
        }
    }
    return g+h;
}

void copy(int temp[],int real[]){
    for(int i=0;i<9;i++){
        temp[i]=real[i];
    }
}

void movetile(int start[],int goal[]){
    int emptyat=0;
    for(int i=0;i<9;i++){
        if(start[i]==-1){
            emptyat=i;
            break;
        }
    }

    int t1[9],t2[9],t3[9],t4[9];
    int f1=INT_MAX,f2=INT_MAX,f3=INT_MAX,f4=INT_MAX;
    
    copy(t1,start);
    copy(t2,start);
    copy(t3,start);
    copy(t4,start);
    int row=emptyat/3;
    int col=emptyat %3;

    if(col-1>=0){
        moveleft(t1,emptyat);
        f1=heurstic(t1,goal);
    }
    if(col+1<3){
        moveright(t2,emptyat);
        f2=heurstic(t2,goal);
    }
    if(row+1<3){
        movedown(t3,emptyat);
        f3=heurstic(t3,goal);
    }
    if(row-1>=0){
        moverup(t3,emptyat);
        f4=heurstic(t4,goal);
    }

    if(f1<=f2&&f1<=f3&&f1<=f4){
        moveleft(start,emptyat);
    }
    else if(f2<=f3&&f2<=f1&&f2<=f4){
        moveright(start,emptyat);
    }else if(f3<=f4&&f3<=f1&&f3<=f2){
        movedown(start,emptyat);
    }else{
        moverup(start,emptyat);
    }
}

void solve(int start[],int goal[]){
    g++;
    movetile(start,goal);
   display(start);
    int f=heurstic(start,goal);
    if(f==g){
        cout<<"solve in "<<f<<"move ";
        return;
   }
   solve(start,goal);

}
int main(){
    int start[9],goal[9];
    cout<<"start elemnt ";
    for(int i=0;i<9;i++){
        cin>>start[i];
    }
    cout<<"goal element";
    for(int j=0;j<9;j++){
        cin>>goal[j];
    }
   // display(start);
    solve(start,goal);

return 0;
}